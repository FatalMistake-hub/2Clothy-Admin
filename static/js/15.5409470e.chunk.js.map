{"version":3,"sources":["pages/Profile/Profile.js","components/Chart/ChartCard.js","components/Chart/ChartLegend.js","utils/demo/chartsData.js","components/UsersTable.js","components/Typography/PageTitle.js"],"names":["Profile","resultsPerPage","Chart","children","title","className","ChartLegend","legends","map","legend","key","color","lineLegends","lineOptions","data","labels","datasets","label","backgroundColor","borderColor","fill","options","responsive","tooltips","mode","intersect","hover","scales","x","display","scaleLabel","labelString","y","position","doughnutLegends","doughnutOptions","cutoutPercentage","UsersTable","filter","useState","page","setPage","setData","response","setResponse","userGroups","setUserGroups","totalResults","length","user","useSelector","authRemainingSelector","currentUser","login","dispatch","useDispatch","axiosJWT","createInstance","AuthSlice","actions","loginSuccess","useEffect","a","apiAuthService","accessToken","result","groupData","fetchApi","useLayoutEffect","slice","handleSelected","UserGroupId","UserId","console","log","parseInt","i","id","name","email","moment","dateCreated","format","onChange","e","target","value","group","selected","description","userGroupName","p","PageTitle"],"mappings":"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","file":"static/js/15.5409470e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PageTitle from \"../../components/Typography/PageTitle\";\r\nimport ChartCard from \"../../components/Chart/ChartCard\";\r\nimport { Doughnut, Line, Bar } from \"react-chartjs-2\";\r\nimport ChartLegend from \"../../components/Chart/ChartLegend\";\r\nimport {\r\n  lineOptions,\r\n  lineLegends,\r\n  realTimeUsersBarLegends,\r\n  realTimeUsersBarOptions,\r\n} from \"../../utils/demo/chartsData\";\r\nimport UsersTable from \"../../components/UsersTable\";\r\n\r\nconst Profile = () => {\r\n  return (\r\n    <div>\r\n      <PageTitle>Manage Profile</PageTitle>\r\n\r\n\r\n      <UsersTable resultsPerPage={10} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\n\r\nfunction Chart({ children, title }) {\r\n    return (\r\n        <div className=\"w-min h-full flex items-center flex-col p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800\" >\r\n            <p className=\"mb-4 font-semibold text-gray-800 dark:text-gray-300\">{title}</p>\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chart;\r\n","import React from 'react'\r\n\r\nfunction ChartLegend({ legends }) {\r\n  return (\r\n    <div className=\"flex justify-center mt-4 space-x-3 text-sm text-gray-600 dark:text-gray-400\">\r\n      {legends.map((legend) => (\r\n        <div className=\"flex items-center\" key={legend.title}>\r\n          <span className={`inline-block w-3 h-3 mr-1 ${legend.color} rounded-full`}></span>\r\n          <span>{legend.title}</span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChartLegend\r\n","export const lineLegends = [\r\n  { title: \"Organic\", color: \"bg-teal-600\" },\r\n  { title: \"Paid\", color: \"bg-orange-600\" },\r\n];\r\nexport const lineOptions = {\r\n  data: {\r\n    labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\r\n    datasets: [\r\n      {\r\n        label: \"Organic\",\r\n        backgroundColor: \"#0694a2\",\r\n        borderColor: \"#0694a2\",\r\n        data: [43, 48, 40, 54, 67, 73, 70],\r\n        fill: false,\r\n      },\r\n      {\r\n        label: \"Paid\",\r\n        fill: false,\r\n        backgroundColor: \"#7e3af2\",\r\n        borderColor: \"#7e3af2\",\r\n        data: [24, 50, 64, 74, 52, 51, 65],\r\n      },\r\n    ],\r\n  },\r\n  options: {\r\n    responsive: true,\r\n    tooltips: {\r\n      mode: \"index\",\r\n      intersect: false,\r\n    },\r\n    hover: {\r\n      mode: \"nearest\",\r\n      intersect: true,\r\n    },\r\n    scales: {\r\n      x: {\r\n        display: true,\r\n        scaleLabel: {\r\n          display: true,\r\n          labelString: \"Month\",\r\n        },\r\n      },\r\n      y: {\r\n        display: true,\r\n        scaleLabel: {\r\n          display: true,\r\n          labelString: \"Value\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n  legend: {\r\n    display: true,\r\n    position:'bottom',\r\n  },\r\n};\r\n\r\n\r\n\r\nexport const doughnutLegends = [\r\n  { title: \"Shirts\", color: \"bg-blue-500\" },\r\n  { title: \"Shoes\", color: \"bg-teal-600\" },\r\n  { title: \"Bags\", color: \"bg-orange-600\" },\r\n];\r\nexport const barLegends = [\r\n  { title: \"Shoes\", color: \"bg-teal-600\" },\r\n  { title: \"Bags\", color: \"bg-orange-600\" },\r\n];\r\nexport const realTimeUsersBarLegends = [\r\n  { title: \"Active Users\", color: \"bg-teal-600\" },\r\n];\r\nexport const doughnutOptions = {\r\n  data: {\r\n    datasets: [\r\n      {\r\n        data: [33, 33, 33],\r\n        /**\r\n         * These colors come from Tailwind CSS palette\r\n         * https://tailwindcss.com/docs/customizing-colors/#default-color-palette\r\n         */\r\n        backgroundColor: [\"#0694a2\", \"#1c64f2\", \"#7e3af2\"],\r\n        label: \"Dataset 1\",\r\n      },\r\n    ],\r\n    labels: [\"Shoes\", \"Shirts\", \"Bags\"],\r\n  },\r\n  options: {\r\n    responsive: true,\r\n    cutoutPercentage: 80,\r\n  },\r\n  legend: {\r\n    display: false,\r\n  },\r\n};\r\nexport const barOptions = {\r\n  data: {\r\n    labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\r\n    datasets: [\r\n      {\r\n        label: \"Shoes\",\r\n        backgroundColor: \"#0694a2\",\r\n        // borderColor: window.chartColors.red,\r\n        borderWidth: 1,\r\n        data: [-3, 14, 52, 74, 33, 90, 70],\r\n      },\r\n      {\r\n        label: \"Bags\",\r\n        backgroundColor: \"#7e3af2\",\r\n        // borderColor: window.chartColors.blue,\r\n        borderWidth: 1,\r\n        data: [66, 33, 43, 12, 54, 62, 84],\r\n      },\r\n    ],\r\n  },\r\n  options: {\r\n    responsive: true,\r\n  },\r\n  legend: {\r\n    display: false,\r\n  },\r\n};\r\nexport const realTimeUsersBarOptions = {\r\n  data: {\r\n    labels: [\r\n      \"6.00\",\r\n      \"6.10\",\r\n      \"6.20\",\r\n      \"6.30\",\r\n      \"6.40\",\r\n      \"6.50\",\r\n      \"7.00\",\r\n      \"7.10\",\r\n      \"7.20\",\r\n      \"7.30\",\r\n      \"7.40\",\r\n      \"7.50\",\r\n      \"Now\",\r\n    ],\r\n    datasets: [\r\n      {\r\n        label: \"Active Users\",\r\n        backgroundColor: \"#0694a2\",\r\n        // borderColor: window.chartColors.red,\r\n        borderWidth: 1,\r\n        data: [2, 14, 52, 74, 33, 90, 70, 34, 56, 62, 11, 23, 55],\r\n      },\r\n    ],\r\n  },\r\n  options: {\r\n    responsive: true,\r\n  },\r\n  legend: {\r\n    display: false,\r\n  },\r\n};\r\n","import React, { useState, useEffect, useLayoutEffect } from 'react';\r\nimport {\r\n    TableBody,\r\n    TableContainer,\r\n    Table,\r\n    TableHeader,\r\n    TableCell,\r\n    TableRow,\r\n    TableFooter,\r\n    Avatar,\r\n    Badge,\r\n    Dropdown,\r\n    Select,\r\n    DropdownItem,\r\n    Pagination,\r\n    Label,\r\n    Button,\r\n} from '@windmill/react-ui';\r\nimport { authRemainingSelector } from '../redux/selector';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { createInstance } from '../services/createInstance';\r\nimport AuthSlice from '../redux/AuthSlice';\r\nimport * as apiAuthService from '../services/authService';\r\nimport moment from 'moment/moment';\r\n\r\nconst UsersTable = ({ resultsPerPage, filter }) => {\r\n    const [page, setPage] = useState(1);\r\n    const [data, setData] = useState([]);\r\n    const [response, setResponse] = useState([]);\r\n    const [userGroups, setUserGroups] = useState([]);\r\n\r\n    // pagination setup\r\n    const totalResults = response.length;\r\n\r\n    // pagination change control\r\n    function onPageChange(p) {\r\n        setPage(p);\r\n    }\r\n    const user = useSelector(authRemainingSelector);\r\n    const currentUser = user?.login.currentUser;\r\n    const dispatch = useDispatch();\r\n    let axiosJWT = createInstance(currentUser, dispatch, AuthSlice.actions.loginSuccess);\r\n    useEffect(() => {\r\n        const fetchApi = async () => {\r\n            const result = await apiAuthService.getAllUser(currentUser.accessToken, axiosJWT);\r\n            const groupData = await apiAuthService.getUserGroup(currentUser.accessToken, axiosJWT);\r\n            setResponse(result);\r\n            setUserGroups(groupData);\r\n        };\r\n        fetchApi();\r\n    }, []);\r\n    // on page change, load new sliced data\r\n    // here you would make another server request for new data\r\n    useLayoutEffect(() => {\r\n        setData(response?.slice((page - 1) * resultsPerPage, page * resultsPerPage));\r\n    }, [page, resultsPerPage, filter, response]);\r\n\r\n    const handleSelected = async (UserGroupId, UserId) => {\r\n        console.log(parseInt(UserGroupId), UserId);\r\n\r\n        let axiosJWT = createInstance(currentUser, dispatch, AuthSlice.actions.loginSuccess);\r\n        const result = await apiAuthService.updateUser(\r\n            { UserId: parseInt(UserGroupId), UserGroupId: UserId },\r\n            currentUser.accessToken,\r\n            axiosJWT,\r\n        );\r\n        setResponse(result);\r\n    };\r\n    return (\r\n        <div>\r\n            {/* Table */}\r\n            <TableContainer className=\"mb-8\">\r\n                <Table>\r\n                    <TableHeader>\r\n                        <tr>\r\n                            <TableCell>First Name</TableCell>\r\n                            <TableCell>Last Name</TableCell>\r\n                            <TableCell>Email</TableCell>\r\n                            {/* <TableCell>Joined on</TableCell>\r\n                            <TableCell>Role</TableCell> */}\r\n                            <TableCell>Joined on</TableCell>\r\n                            <TableCell>Role</TableCell>\r\n                        </tr>\r\n                    </TableHeader>\r\n                    <TableBody>\r\n                        {data.map((user, i) => (\r\n                            <TableRow key={i}>\r\n                                <TableCell>\r\n                                    <div className=\"flex items-center text-sm\">\r\n                                        <div>\r\n                                            <p className=\"font-semibold\">#UID{user.id}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <span className=\"text-sm\">{user.name}</span>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <span className=\"text-sm\">{user.email}</span>\r\n                                </TableCell>\r\n\r\n                                <TableCell>\r\n                                    <span className=\"text-sm\">{moment(user.dateCreated).format('L')}</span>\r\n                                </TableCell>\r\n                                {/* <TableCell>\r\n                                    <span className=\"text-sm\">{user.phoneNumber}</span>\r\n                                </TableCell>\r\n\r\n                                <TableCell>\r\n                                    <span className=\"text-sm\">{(user.address)}</span>\r\n                                </TableCell> */}\r\n                                <TableCell>\r\n                                    <div className=\"relative\">\r\n                                        <Label>\r\n                                            <span>{}</span>\r\n                                            <Select className=\"mt-1\" onChange={(e) => handleSelected(e.target.value, user.id)}>\r\n                                                {userGroups\r\n                                                    // .filter((item) => item.description != user.userGroupName)\r\n                                                    .map((group, i) => (\r\n                                                        <option\r\n                                                            key={i}\r\n                                                            value={group.id}\r\n                                                            selected={group.description === user.userGroupName}\r\n                                                        >\r\n                                                            {group.description}\r\n                                                        </option>\r\n                                                    ))}\r\n                                            </Select>\r\n                                        </Label>\r\n                                    </div>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n                <TableFooter>\r\n                    <Pagination\r\n                        totalResults={totalResults}\r\n                        resultsPerPage={resultsPerPage}\r\n                        label=\"Table navigation\"\r\n                        onChange={onPageChange}\r\n                    />\r\n                </TableFooter>\r\n            </TableContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UsersTable;\r\n","import React from 'react'\r\n\r\nfunction PageTitle({ children }) {\r\n  return (\r\n    <h1 className=\"my-4 text-2xl font-semibold text-gray-700 dark:text-gray-200\">{children}</h1>\r\n  )\r\n}\r\n\r\nexport default PageTitle\r\n"],"sourceRoot":""}